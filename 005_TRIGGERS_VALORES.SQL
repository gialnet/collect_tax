-- -----------------------------------------------------
-- Euro. Revisado el 30-11-2001. Lucas Fernández Pérez 
-- No se han realizado cambios.
-- -----------------------------------------------------
CREATE OR REPLACE TRIGGER T_INS_VALORES
BEFORE INSERT ON VALORES
FOR EACH ROW

BEGIN

   SELECT GENERVALOR.NEXTVAL INTO :NEW.ID FROM DUAL;

   IF :NEW.YEAR_CONTRAIDO IS NULL THEN
      :NEW.YEAR_CONTRAIDO:=:NEW.YEAR;
   END IF;

   IF :NEW.TIPO_DE_TRIBUTO NOT IN ('IM','TA','CE','PP','NO') THEN
      :NEW.TIPO_DE_TRIBUTO:='IM';
   END IF;


END;
/

-- ----------------------------------------------------------------------------------------
-- Si lo que se ha insertado en valores es una liquidación procedente de nuestra gestión, 
-- y no está activo el pase automático, debemos grabar en la tabla liquidaciones el ID del
-- valor para poder posteriormente dar por cobrada esa liquidación desde C60
-- ----------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER T_INS_LIQUI_VALORES
AFTER INSERT ON VALORES
FOR EACH ROW

DECLARE
   xPASE CHAR(1);
   xNCARGO CHAR(10);
   xIDLIQUI INTEGER;
BEGIN

   begin
      SELECT PASE_AUTOMATICO,NCARGO INTO xPASE,xNCARGO
      FROM DATOSPERR WHERE EMPRESA IS NOT NULL;	
      EXCEPTION
         when no_data_found then	  
	      xPASE:='N';	
   end;

   IF ((:NEW.TIPO_DE_OBJETO='L') AND (xPASE='N')) THEN  
     begin 
	   SELECT ID INTO xIDLIQUI FROM LIQUIDACIONES
	   WHERE MUNICIPIO=:NEW.AYTO AND CONCEPTO=:NEW.PADRON AND
		   YEAR=:NEW.YEAR AND PERIODO=:NEW.PERIODO AND
		   NUMERO=:NEW.RECIBO;
	   Exception
		When no_data_found then
		   xIDLIQUI:=0;
	 end;
	 IF (xIDLIQUI>0) THEN
	   UPDATE LIQUIDACIONES SET IDVALOR=:NEW.ID
	   WHERE ID=xIDLIQUI;		
	 END IF;      
   END IF;
END;
/


/********************************************************************************************/
-- Este trigger solo se activará cuando se seleccione pase automático de liquidaciones
-- desde Gestión Tributaria a Recaudación. 
-- Por defecto, cuando se haga una nueva instalación, después de crear el trigger lo
-- inhabilitaremos, ya que inicialmente está desactivada la opción de pase automático.
-- Modificado: 10/12/2004. Gloria Maria Calle Hernandez. Existen Conceptos no tributarios
-- entonces comparar con el programa de MULTAS.
-- Modificado: 21/12/2004. Gloria Maria Calle Hernandez. Comparar TRIM(programa)='MULTAS', pues al
-- ser el campo en la tabla un CHAR almacena espacios finales.
-- Modificado: 11/01/2005 Mª Carmen Junco Gómez. Al ingresar una multa, en vez de controlar que la fecha
-- de bonificación sea o no nula, se comprueba si la cuota inicial es > al principal, ya que se dan casos
-- de anulación de bonificaciones antes de procesar cuadernos 60 con cartas de pago con importe bonificado

CREATE OR REPLACE TRIGGER T_UPD_VALORES
AFTER UPDATE ON VALORES
FOR EACH ROW
WHEN (NEW.TIPO_DE_OBJETO='L' )
DECLARE
	xTEXTO 		VARCHAR2(70);
	xEstado		char(2);
	xPrograma	VARCHAR2(10);
BEGIN
   BEGIN
 	  SELECT TRIM(PROGRAMA) INTO xPrograma FROM PROGRAMAS WHERE CONCEPTO=:NEW.PADRON;
   EXCEPTION
      WHEN no_data_found THEN
	       xPrograma:= null;  
   END;

   IF :NEW.F_INGRESO IS NOT NULL AND :OLD.F_INGRESO IS NULL THEN
		IF xPrograma='MULTAS' THEN
		
			IF (:NEW.CUOTA_INICIAL>:NEW.PRINCIPAL) THEN
				xEstado:='IN';  --ingresada en voluntaria con descuento
			ELSE
				IF :NEW.VOL_EJE='V' THEN
					xEstado:='IV';  --ingresada en voluntaria sin descuento
				ELSE
					xEstado:='IE';  --ingresada en ejecutiva
				END IF;
			END IF;
			
			UPDATE MULTAS SET ULTIMO_ESTADO=ESTADO_ACTUAL,
						F_ULTIMO_ESTADO=FECHA_ESTADO_ACTUAL,
						ESTADO_ACTUAL=xEstado,
						FECHA_ESTADO_ACTUAL=:NEW.F_INGRESO
      	    WHERE ID=:NEW.CLAVE_RECIBO;
		ELSE
		
	        UPDATE LIQUIDACIONES SET F_INGRESO=:NEW.F_INGRESO,CODIGO_INGRESO='VE'
      	    WHERE ID=:NEW.CLAVE_RECIBO;
      	    
			IF :NEW.CLAVE_RECIBO IS NOT NULL THEN
            		INSERT_HISTORIA_LIQUI(:NEW.CLAVE_RECIBO,'I',
					'SE INGRESA LA LIQUIDACION DESDE RECAUDACIÓN');
			END IF;
		END IF;
   END IF;
   IF :NEW.F_INGRESO IS NULL AND :OLD.F_INGRESO IS NOT NULL THEN
		IF xPrograma='MULTAS' THEN
			UPDATE MULTAS SET ESTADO_ACTUAL=ULTIMO_ESTADO,
						FECHA_ESTADO_ACTUAL=F_ULTIMO_ESTADO
      	      WHERE ID=:NEW.CLAVE_RECIBO;
		ELSE
	   	      SELECT SUBSTR(TEXTO,1,70) INTO xTEXTO FROM USUARIOS WHERE USUARIO=USER;
      	      UPDATE LIQUIDACIONES SET F_INGRESO=NULL,CODIGO_INGRESO=NULL
            	WHERE ID=:NEW.CLAVE_RECIBO AND F_INGRESO IS NOT NULL;
			IF :NEW.CLAVE_RECIBO IS NOT NULL THEN
			      INSERT_HISTORIA_LIQUI(:NEW.CLAVE_RECIBO,'R',xTEXTO);
			END IF;
		END IF;
   END IF;
   IF :NEW.F_SUSPENSION IS NOT NULL AND :OLD.F_SUSPENSION IS NULL THEN
		IF xPrograma='MULTAS' THEN
			UPDATE MULTAS SET ULTIMO_ESTADO=ESTADO_ACTUAL,
						F_ULTIMO_ESTADO=FECHA_ESTADO_ACTUAL,
						ESTADO_ACTUAL='SU',
						FECHA_ESTADO_ACTUAL=:NEW.F_SUSPENSION
      	      WHERE ID=:NEW.CLAVE_RECIBO;
		ELSE
			UPDATE LIQUIDACIONES SET F_SUSPENSION=:NEW.F_SUSPENSION
			WHERE ID=:NEW.CLAVE_RECIBO AND F_INGRESO IS NULL AND F_ANULACION IS NULL AND F_SUSPENSION IS NULL;
			IF :NEW.CLAVE_RECIBO IS NOT NULL THEN
	   			INSERT_HISTORIA_LIQUI(:NEW.CLAVE_RECIBO,'S','SE SUSPENDE LA LIQUIDACION DESDE RECAUDACION');
			END IF;
		END IF;
   END IF;
   IF :NEW.F_SUSPENSION IS NULL AND :OLD.F_SUSPENSION IS NOT NULL THEN
		IF xPrograma='MULTAS' THEN
			UPDATE MULTAS SET ESTADO_ACTUAL=ULTIMO_ESTADO,
						FECHA_ESTADO_ACTUAL=F_ULTIMO_ESTADO
      	      WHERE ID=:NEW.CLAVE_RECIBO;
		ELSE
			UPDATE LIQUIDACIONES SET F_SUSPENSION=NULL
			WHERE ID=:NEW.CLAVE_RECIBO AND F_INGRESO IS NULL
					AND F_ANULACION IS NULL AND F_SUSPENSION IS NOT NULL;
			IF :NEW.CLAVE_RECIBO IS NOT NULL THEN
	   			INSERT_HISTORIA_LIQUI(:NEW.CLAVE_RECIBO,'E','SE QUITA LA SUSPENSION DESDE RECAUDACIÓN');
			END IF;
		END IF;
   END IF;
   IF :NEW.FECHA_DE_BAJA IS NOT NULL AND :OLD.FECHA_DE_BAJA IS NULL THEN
		IF xPrograma='MULTAS' THEN
			UPDATE MULTAS SET ULTIMO_ESTADO=ESTADO_ACTUAL,
						F_ULTIMO_ESTADO=FECHA_ESTADO_ACTUAL,
						ESTADO_ACTUAL='AN',
						FECHA_ESTADO_ACTUAL=:NEW.FECHA_DE_BAJA
      	      WHERE ID=:NEW.CLAVE_RECIBO;
		ELSE
			UPDATE LIQUIDACIONES SET F_ANULACION=:NEW.FECHA_DE_BAJA
						WHERE ID=:NEW.CLAVE_RECIBO AND F_INGRESO IS NULL AND F_ANULACION IS NULL;
			IF :NEW.CLAVE_RECIBO IS NOT NULL THEN
				INSERT_HISTORIA_LIQUI(:NEW.CLAVE_RECIBO,'E','SE ANULA LA LIQUIDACION DESDE RECAUDACIÓN');
			END IF;
		END IF;
   END IF;
   IF :NEW.FECHA_DE_BAJA IS NULL AND :OLD.FECHA_DE_BAJA IS NOT NULL THEN
		IF xPrograma='MULTAS' THEN
			UPDATE MULTAS SET ESTADO_ACTUAL=ULTIMO_ESTADO,
						FECHA_ESTADO_ACTUAL=F_ULTIMO_ESTADO
      	      WHERE ID=:NEW.CLAVE_RECIBO;
		ELSE
			UPDATE LIQUIDACIONES SET F_ANULACION=NULL
			WHERE ID=:NEW.CLAVE_RECIBO AND F_INGRESO IS NULL AND F_ANULACION IS NOT NULL;
			IF :NEW.CLAVE_RECIBO IS NOT NULL THEN
				INSERT_HISTORIA_LIQUI(:NEW.CLAVE_RECIBO,'E',
							'SE REPONE LA LIQUIDACION AL COBRO DESDE RECAUDACIÓN');
			END IF;
		END IF;
   END IF;
END;
/


/********************************************************************************************/

CREATE OR REPLACE TRIGGER T_UPDVALORES_EXPE
AFTER UPDATE ON VALORES
FOR EACH ROW
WHEN (OLD.EXPEDIENTE IS NOT NULL OR NEW.EXPEDIENTE IS NOT NULL)
BEGIN

  
-- SE INGRESA

   IF :NEW.F_INGRESO IS NOT NULL AND :OLD.F_INGRESO IS NULL THEN

	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR)
	VALUES (:OLD.EXPEDIENTE, 'S', 'IN', :NEW.ID);

   END IF;   

-- SE REPONE
   IF :NEW.F_INGRESO IS NULL AND :OLD.F_INGRESO IS NOT NULL THEN

	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR)
	VALUES (:OLD.EXPEDIENTE, 'E', 'IN', :NEW.ID);
   
   END IF;	 


-- SE SUSPENDE
   IF :NEW.F_SUSPENSION IS NOT NULL AND :OLD.F_SUSPENSION IS NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR)
	VALUES (:OLD.EXPEDIENTE, 'S', 'SU', :NEW.ID);


   END IF;

-- SE REPONE LA SUSPENSION
   IF :NEW.F_SUSPENSION IS NULL AND :OLD.F_SUSPENSION IS NOT NULL THEN

	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR)
	VALUES (:OLD.EXPEDIENTE, 'E', 'SU', :NEW.ID);
   

   END IF;

-- SE DA DE BAJA
   IF :NEW.FECHA_DE_BAJA IS NOT NULL AND :OLD.FECHA_DE_BAJA IS NULL THEN
   
	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR)
	VALUES (:OLD.EXPEDIENTE, 'S', 'BA', :NEW.ID);

   END IF;   

-- SE REPONE LA BAJA
   IF :NEW.FECHA_DE_BAJA IS NULL AND :OLD.FECHA_DE_BAJA IS NOT NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR)
	VALUES (:OLD.EXPEDIENTE, 'E', 'BA', :NEW.ID);

   END IF;   

-- SE ACUMULAN DEBITOS
   IF :NEW.EXPEDIENTE IS NOT NULL AND :OLD.EXPEDIENTE IS NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR)
	VALUES (:NEW.EXPEDIENTE, 'E', 'AC', :NEW.ID);

   END IF;


-- SE DESAGRUPAN
   IF :NEW.EXPEDIENTE IS NULL AND :OLD.EXPEDIENTE IS NOT NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR)
	VALUES (:OLD.EXPEDIENTE, 'S', 'AC', :NEW.ID);

   END IF;
   
   -- -----------
   -- EMBARGOS 
   -- -----------
   -- CUENTAS: Se acumula el valor a un embargo
   IF :NEW.ID_DILIG_ECC IS NOT NULL AND :OLD.ID_DILIG_ECC IS NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR, EMBARGO, IDEMBARGO)
	VALUES (:OLD.EXPEDIENTE, 'E', 'EM', :NEW.ID,'1',:NEW.ID_DILIG_ECC);

   END IF;
   
   -- CUENTAS: Se aminora el valor de un embargo
   IF :NEW.ID_DILIG_ECC IS NULL AND :OLD.ID_DILIG_ECC IS NOT NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR, EMBARGO, IDEMBARGO)
	VALUES (:OLD.EXPEDIENTE, 'S', 'EM', :NEW.ID,'1',:OLD.ID_DILIG_ECC);

   END IF;

   -- SALARIOS: Se acumula el valor a un embargo
   IF :NEW.ID_SALARIOS IS NOT NULL AND :OLD.ID_SALARIOS IS NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR, EMBARGO, IDEMBARGO)
	VALUES (:OLD.EXPEDIENTE, 'E', 'EM', :NEW.ID,'3',:NEW.ID_SALARIOS);

   END IF;
   
   -- SALARIOS: Se aminora el valor de un embargo
   IF :NEW.ID_SALARIOS IS NULL AND :OLD.ID_SALARIOS IS NOT NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR, EMBARGO, IDEMBARGO)
	VALUES (:OLD.EXPEDIENTE, 'S', 'EM', :NEW.ID,'3',:OLD.ID_SALARIOS);

   END IF;

   -- INMUEBLES: Se acumula el valor a un embargo
   IF :NEW.ID_INMUEBLES IS NOT NULL AND :OLD.ID_INMUEBLES IS NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR, EMBARGO, IDEMBARGO)
	VALUES (:OLD.EXPEDIENTE, 'E', 'EM', :NEW.ID,'4',:NEW.ID_INMUEBLES);

   END IF;
   
   -- INMUEBLES: Se aminora el valor de un embargo
   IF :NEW.ID_INMUEBLES IS NULL AND :OLD.ID_INMUEBLES IS NOT NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR, EMBARGO, IDEMBARGO)
	VALUES (:OLD.EXPEDIENTE, 'S', 'EM', :NEW.ID,'4',:OLD.ID_INMUEBLES);

   END IF;

   -- VEHICULOS: Se acumula el valor a un embargo
   IF :NEW.ID_VEHICULOS IS NOT NULL AND :OLD.ID_VEHICULOS IS NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR, EMBARGO, IDEMBARGO)
	VALUES (:OLD.EXPEDIENTE, 'E', 'EM', :NEW.ID,'8',:NEW.ID_VEHICULOS);

   END IF;
   
   -- VEHICULOS: Se aminora el valor de un embargo
   IF :NEW.ID_VEHICULOS IS NULL AND :OLD.ID_VEHICULOS IS NOT NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR, EMBARGO, IDEMBARGO)
	VALUES (:OLD.EXPEDIENTE, 'S', 'EM', :NEW.ID,'8',:OLD.ID_VEHICULOS);

   END IF;

   -- OTROS TRAMITES: Se acumula el valor a un embargo
   IF :NEW.ID_OTROSTRAMITES IS NOT NULL AND :OLD.ID_OTROSTRAMITES IS NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR, EMBARGO, IDEMBARGO)
	VALUES (:OLD.EXPEDIENTE, 'E', 'EM', :NEW.ID,'X',:NEW.ID_OTROSTRAMITES);

   END IF;
   
   -- OTROS TRAMITES: Se aminora el valor de un embargo
   IF :NEW.ID_OTROSTRAMITES IS NULL AND :OLD.ID_OTROSTRAMITES IS NOT NULL THEN

   	INSERT INTO Bitacoras (IDEXPE, TIPO_MOVIMIENTO, MOTIVO, IDVALOR, EMBARGO, IDEMBARGO)
	VALUES (:OLD.EXPEDIENTE, 'S', 'EM', :NEW.ID,'X',:OLD.ID_OTROSTRAMITES);

   END IF;

END;
/

/**************************************************************************************
Acción: controla las propuestas de baja para insertar o borrar de la tabla propuestas_baja.
Autor: 26/05/2003 M. Carmen Junco Gómez.
***************************************************************************************/

CREATE OR REPLACE TRIGGER T_UPDVALORES_PROPUBAJA
AFTER UPDATE OF PROPU_INSOLVENTE ON VALORES
FOR EACH ROW
DECLARE
   xZONA CHAR(2);
BEGIN
	
	SELECT ZONA INTO xZONA FROM USUARIOS WHERE USUARIO=USER;
	
	IF (:OLD.PROPU_INSOLVENTE='N') THEN 
	   INSERT INTO PROPUESTAS_BAJA (IDVALOR,ZONA) VALUES (:NEW.ID,xZONA);	
	ELSIF (:NEW.PROPU_INSOLVENTE='N') THEN
	   DELETE FROM PROPUESTAS_BAJA WHERE IDVALOR=:NEW.ID;
	END IF;

END;
/
